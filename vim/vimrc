
set nocompatible
execute pathogen#infect()
syntax on
filetype plugin on
filetype plugin indent on
set encoding=utf-8

set autoindent
set smartindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set smarttab
set showcmd
set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set ruler
set cmdheight=2
set scrolloff=4
set sidescrolloff=9
set display+=lastline
set clipboard+=unnamed
set nojoinspaces
set hlsearch
set incsearch
set ignorecase
set smartcase
set nowrap
set linebreak
set autowriteall
set autoread
set wildmenu
set wildmode=list:full
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.log
set shortmess=atI

set nocursorcolumn
set nocursorline
" au WinLeave * set nocursorline
" au WinEnter * set cursorline

"" Speed up macros
set lazyredraw

set t_Co=256
syntax on

set background=dark
colorscheme iv-solarized

highlight ColorColumn ctermbg=magenta ctermfg=black
call matchadd('ColorColumn', '\%80v', 100)

" russian
set keymap=russian-jcukenmac
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan


runtime macros/matchit.vim

"" Show full tags when doing search completion
"set showfulltag

" Turn off swap files
set noswapfile
set nobackup
set updatecount=0

set path=**
set suffixesadd+=.py

" turn off octal numbers for <C-a>, <C-x>
set nrformats-=octal
set shiftround
" set ttimeout
" set ttimeoutlen=50

exec "set listchars=tab:\uBB\uBB,nbsp:~,trail:⊔,extends:>,precedes:<"
set list

set laststatus=2
" set the status line to display some useful information
set stl=%<\ [%3*%n%H%M%R%W%*]\ %<%F
set stl+=\ %1*%{TagInStatusLineTag()}%*%=
set stl+=%5*%l%*/%L\ %5*%v%*


" git@github.com:vim-scripts/vim-auto-save.git
let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
let g:auto_save_silent = 1  " do not display the auto-save notification


set shell=/bin/bash

set fileformats+=unix

set tabpagemax=9

set history=10240

" viminfo options.txt 7577
set viminfo='4000,f100,<4400,:4800,@5500,/5900,%7700


" hiding list ^\.*/tmp/\.*$,^\.*\.so$,^\.*\.swp$,^\.*\.zip$,^\.*\.pyc$,^\.*\.log$,^\.\.\=/\=$,^\.,\.pid$,\.sock.$

" easy access to beginning and end of line
" noremap - ^
" noremap _ $

nnoremap ' `
nnoremap ` '

nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" Change ""-quotes to «»-quotes
nnoremap <leader>< ?"r<<Nr>>

nnoremap <F2> :Pytest file<cr>

nnoremap <F6> :wall<cr>:call VimuxRunCommand("python " . shellescape(expand('%'), 1))<cr>
nnoremap <F7> :wall<cr>:VimuxRunLastCommand<cr>

nnoremap <F8> :FocusDispatch
nnoremap <F9> :Dispatch<cr>
autocmd FileType python let b:dispatch = 'python %'

" Join function arguments into one line
nnoremap <F3> :normal vabJ0%cs()kj<cr>

nnoremap [R Bi<cr><esc>
nnoremap ]R Wi<cr><esc>

nnoremap [r i<cr><esc>ge
nnoremap ]r a<cr><esc>ge

nnoremap <leader>t :!.git/hooks/ctags<cr>

nmap <leader>b dsbdb

" nnoremap <C-w>t :tabnew<cr>
" nnoremap <C-w><c-t> mM:tabnew<cr>`M

" for dvorak
" …

nnoremap <leader>c :tabnew<cr>
nnoremap <leader>t mM:tabnew<cr>`M
nnoremap <leader>x :tabclose<cr>


" LocationList toggle
nnoremap <leader>l :call LocationListToggle()<cr>
let g:location_list_is_open = 0
function! LocationListToggle()
    if g:location_list_is_open
        lclose
        let g:location_list_is_open = 0
        execute g:location_list_return_to_window . "wincmd w"
    else
        let g:location_list_return_to_window = winnr()
        lopen
        let g:location_list_is_open = 1
    endif
endfunction


autocmd QuickFixCmdPost * bot cwindow " open quickfix at bottom

" qickfix toggle
nnoremap <leader>q :call QuickfixToggle()<cr>
let g:quickfix_is_open = 0
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction

" quickfix autoheight
au FileType qf call AdjustWindowHeight(3, 21)
function! AdjustWindowHeight(minheight, maxheight)
    let l = 1
    let n_lines = 0
    let w_width = winwidth(0)
    while l <= line('$')
        " number to float for division
        let l_len = strlen(getline(l)) + 0.0
        let line_width = l_len/w_width
        let n_lines += float2nr(ceil(line_width))
        let l += 1
    endw
    exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

nnoremap <leader><C-g> :Ggrep <C-r><C-w>

" rearrange arguments each to one line
nnoremap <leader>4  %mm%lc`m<cr><cr><c-o>k<c-r>"<esc>kmmjjmnk:s/\v\,\zs\s/\r/g<cr>`nv`m=

" ex_mode/history-scrollers.vim
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

inoremap <C-U> <C-G>u<C-U>

" The & command is a synonym for :s, which repeats the last substitution. Unfortunately,
" if any flags were used, the & command disregards them, meaning that the outcome
"     could be quite different from the previous substitution.
"     Making & trigger the :&& command is more useful. It preserves flags and therefore
"     produces more consistent results. These mappings fix the & command in Normal
"     mode and create a Visual mode equivalent:
nnoremap & :&&<CR>
xnoremap & :&&<CR>

xnoremap . :normal .<CR>

" Y baheave as C and D
nnoremap Y y$

" hide search matches
nnoremap <silent><C-l> :<C-u>nohlsearch<cr><C-l>

" sort
nnoremap <Leader>s :sort i<cr>
vnoremap <Leader>s :sort i<cr>

" au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
au FileType javascript setlocal equalprg=python\ -m\ json.tool\ 2>/dev/null

nnoremap <Leader>8 <esc>:!autopep8 --in-place --aggressive --aggressive %<cr>

" edit ~/.vim/colors/iv-color.vim
nnoremap <Leader>C :n ~/.vim/colors/iv-color.vim<cr>

" edit reload .vimrc
nnoremap <Leader>V :n ~/.vim/vimrc<cr>

" reload .vimrc
nnoremap <Leader>v :update<cr>:so $MYVIMRC<cr>
" autocmd BufWritePost ~/.vimrc   so ~/.vimrc

" git diff
nnoremap <Leader>d :!clear; git diff -U2 HEAD<cr>

" Strip trailing whitespace {{{2
function! Preserve(command)
" Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
" Do the business:
  execute a:command
" Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! GitAutocommitCurrentFile()
    :w!
    :lcd %:h
    :silent! !git reset
    :silent! !git add -f %
    :silent! !git commit -m '% autocommit'
    :lcd!
    :e!
    :redraw!
endfunction

nnoremap <leader>gc :call GitAutocommitCurrentFile()<cr>

" Python

" to python class begin
nnoremap [c ?^class <cr>

" strip trailing space in python files
" autocmd BufWritePre *.py normal m`:%s/\v\s+$//e<cr>``

function! TrimTrailingSpace()
    let save_cursor = getpos(".")
    :silent! %s#\v\s+$##e
    call setpos('.', save_cursor)
endfunction

nnoremap <leader>w :call TrimTrailingSpace()<cr>:w<cr>

" fast :w
nnoremap <Leader>W :w<cr>

" sudo save
nnoremap <Leader><C-w> :w !sudo tee % > /dev/null<cr>


let g:syntastic_python_checkers=['pylint']
let g:syntastic_mode_map = { 'mode': 'passive' }

" TIPS

" mapping for tpope/vim-fugitive
nnoremap <Leader>G :Gstatus<cr>

" go to defn of tag under the cursor
fun! MatchCaseTag()
    let ic = &ic
    set noic
    try
        exe 'tjump ' . expand('<cword>')
    finally
       let &ic = ic
    endtry
endfun
nnoremap <silent> <c-]> :call MatchCaseTag()<CR>

" TIP 'nelstrom/vim-visual-star-search'
" From http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
" makes * and # work on visual mode too.
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" recursively vimgrep for word under cursor or selection if you hit leader-star
nmap <leader>* :execute 'noautocmd vimgrep /\V ' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **/*.py'<CR>
vmap <leader>* :<C-u>call <SID>VSetSearch()<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **/*.py'<CR>


" TIP 'nelstrom/vim-qargs'
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction


" git-gutter
" To change the hunk-jumping maps:
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" To change the hunk-staging/reverting maps:
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterRevertHunk

" TO TURN ON LINE HIGHLIGHTING BY DEFAULT
" let g:gitgutter_highlight_lines = 1


function! VimuxSlime()
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
endfunction

" If text is selected, save it in the v buffer and send that buffer it to tmux
vnoremap <LocalLeader>a "vy :call VimuxSlime()<cr>

" Select current paragraph and send it to tmux
nmap <LocalLeader>a mmvip<LocalLeader>a`m


" git@github.com:vim-scripts/vim-auto-save.git
