set nocompatible
execute pathogen#infect()
syntax on
filetype plugin on
filetype plugin indent on

set encoding=utf-8

set autoindent
set smartindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set smarttab
set showcmd
set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set ruler
set scrolloff=7
set sidescrolloff=9
set display+=lastline
set clipboard+=unnamed
set nojoinspaces
set hlsearch
set incsearch
set ignorecase
set smartcase
set laststatus=2
set nocursorline
set nowrap
set linebreak
set autowriteall
set autoread
set wildmenu
set wildmode=list:full
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.log

set t_Co=256
syntax on
color iv-color
" russian
set keymap=russian-jcukenmac
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan

runtime macros/matchit.vim

"" Show full tags when doing search completion
"set showfulltag
"
"" Speed up macros
"set lazyredraw

" Turn off swap files
set noswapfile
set nobackup
set updatecount=0

set path=**
set suffixesadd+=.py

" turn off octal numbers for <C-a>, <C-x>
set nrformats-=octal
set shiftround
" set ttimeout
" set ttimeoutlen=50

" set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set shell=/bin/bash

set fileformats+=unix

set tabpagemax=9

set history=10240

" viminfo options.txt 7577
set viminfo='4000,f100,<4400,:4800,@5500,/5900,%7700

" Change ""-quotes to «»-quotes
nnoremap <leader>< ?"r<<Nr>>

inoremap <bs> <esc>

nnoremap [R Bi<cr><esc>
nnoremap ]R Wi<cr><esc>

nnoremap [r i<cr><esc>ge
nnoremap ]r a<cr><esc>ge

nnoremap <C-w>t :tabnew<cr>
nnoremap <C-w><c-t> mM:tabnew<cr>`M

" qickfix toggle
nnoremap <leader>q :call QuickfixToggle()<cr>
let g:quickfix_is_open = 0
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction

nnoremap <leader><C-g> :Ggrep <C-r><C-w>

" rearrange arguments each to one line
nnoremap <leader>4  %mm%lc`m<cr><cr><c-o>k<c-r>"<esc>kmmjjmnk:s/\v\,\zs\s/\r/g<cr>`nv`m=

" ex_mode/history-scrollers.vim
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

inoremap <C-U> <C-G>u<C-U>

" The & command is a synonym for :s, which repeats the last substitution. Unfortunately,
" if any flags were used, the & command disregards them, meaning that the outcome
"     could be quite different from the previous substitution.
"     Making & trigger the :&& command is more useful. It preserves flags and therefore
"     produces more consistent results. These mappings fix the & command in Normal
"     mode and create a Visual mode equivalent:
nnoremap & :&&<CR>
xnoremap & :&&<CR>

xnoremap . :normal .<CR>

" Y baheave as C and D
nnoremap Y y$

" hide search matches
nnoremap <silent><C-l> :<C-u>nohlsearch<cr><C-l>

" sort
nnoremap <Leader>s :sort i<cr>
vnoremap <Leader>s :sort i<cr>

" compose jira text to commit comment
nnoremap <Leader>j gg0dwJJ<ESC>

" edit ~/.vim/colors/iv-color.vim
nnoremap <Leader>c :n ~/.vim/colors/iv-color.vim<cr>

" edit reload .vimrc
nnoremap <Leader>V :n ~/.vim/vimrc<cr>

" reload .vimrc
nnoremap <Leader>v :update<cr>:so $MYVIMRC<cr>
" autocmd BufWritePost ~/.vimrc   so ~/.vimrc

" git diff
nnoremap <Leader>d :!clear; git diff -U2 HEAD<cr>

" Strip trailing whitespace {{{2
function! Preserve(command)
" Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
" Do the business:
  execute a:command
" Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" orgmode use
let g:org_agenda_files = ['~/org/*.org']
let g:org_heading_shade_leading_stars = 0

" let g:org_todo_keywords = [['TODO(t)', 'FOCUS(f)', '|', 'DONE(d)']]

" nmap <leader>6 :TagbarToggle<cr>

function! GitAutocommitCurrentFile()
    :w!
    :lcd %:h
    :silent! !git reset
    :silent! !git add -f %
    :silent! !git commit -m '% autocommit'
    :lcd!
    :e!
    :redraw!
endfunction

nnoremap <leader>gc :call GitAutocommitCurrentFile()<cr>

" Python

" to python class begin
nnoremap [c ?^class <cr>

" strip trailing space in python files
" autocmd BufWritePre *.py normal m`:%s/\v\s+$//e<cr>``

function! TrimTrailingSpace()
    let save_cursor = getpos(".")
    :silent! %s#\v\s+$##e
    call setpos('.', save_cursor)
endfunction

nnoremap <leader>8 :call TrimTrailingSpace()<cr>:w<cr>

" fast :w
nnoremap <Leader>w :w<cr>

" sudo save
nnoremap <Leader><C-w> :w !sudo tee % > /dev/null<cr>


" TIPS

" mapping for tpope/vim-fugitive
nnoremap <Leader>G :Gstatus<cr>

" go to defn of tag under the cursor
fun! MatchCaseTag()
    let ic = &ic
    set noic
    try
        exe 'tjump ' . expand('<cword>')
    finally
       let &ic = ic
    endtry
endfun
nnoremap <silent> <c-]> :call MatchCaseTag()<CR>

" TIP 'nelstrom/vim-visual-star-search'
" From http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
" makes * and # work on visual mode too.
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" recursively vimgrep for word under cursor or selection if you hit leader-star
nmap <leader>* :execute 'noautocmd vimgrep /\V ' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **/*.py'<CR>
vmap <leader>* :<C-u>call <SID>VSetSearch()<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **/*.py'<CR>


" TIP 'nelstrom/vim-qargs'
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

