set nocompatible
execute pathogen#infect()
filetype plugin indent on
filetype plugin on
syntax enable
syntax on
set encoding=utf-8

" printers
set popt=paper:letter,header:0
set pdev=14

set foldlevel=4
set autoindent
set autoread
set autowriteall
set backspace=indent,eol,start
set clipboard+=unnamed
set cmdheight=1
set complete-=i
set display+=lastline
set encoding=utf-8
set expandtab
set fileformats+=unix
set history=8192
set hlsearch
set ignorecase
set incsearch
set laststatus=0
set linebreak
set nocursorcolumn
set nocursorline
set nojoinspaces
set nowrap
set nonumber
set ruler
set scrolloff=4
" set sidescrolloff=40
set shell=/run/current-system/sw/bin/bash
set shortmess=atI
set showcmd
set showmatch
set sidescrolloff=9
set smartcase
set smartindent
set smarttab
set tabstop=8
set softtabstop=8
set shiftwidth=2
set tabpagemax=9
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.log
set wildmenu
set wildmode=list:full

set path=**
set suffixesadd+=.py

" set iskeyword=a-z,A-Z,_,.,39

" /usr/share/vim/vim73/keymap/russian-jcuken.vim
set keymap=russian-jcukeniv2
" По умолчанию латинская раскладка
set iminsert=0
" По умолчанию латинская раскладка при поиске
set imsearch=0

"" Turn off swap files
set noswapfile
set nobackup
set updatecount=0

" viminfo options.txt 7577
set viminfo='4000,f100,<4400,:4800,@5500,/5900,%7700

" turn off octal numbers for <C-a>, <C-x>
set nrformats-=octal
set shiftround

set list
" exec "set listchars=tab:›-,nbsp:~,trail:·,extends:>,precedes:<"
exec "set listchars=tab:›-,nbsp:~,trail:∙,extends:>,precedes:<"

runtime macros/matchit.vim

"" Speed up macros
" set lazyredraw

" let g:ctrlp_match_window = 'order:ttb'
let g:ctrlp_match_window = 'order:btt'
" let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript', 'undo', 'line', 'changes', 'mixed', 'bookmarkdir']
" let g:ctrlp_extensions = ['dir', 'tag', 'buffertag', 'mixed']
" let g:ctrlp_extensions = ['buffertag']

let g:EasyGrepFilesToExclude=".*,.git,.hg,.stack-work"

"" Show full tags when doing search completion
"set showfulltag

nnoremap cop :set <C-R>=&paste ? 'nopaste' : 'paste'<CR><CR>

autocmd FileType cfg set commentstring=#\ %s
autocmd FileType cfg set commentstring=#\ %s
autocmd FileType toml set commentstring=#\ %s
" autocmd FileType nix set commentstring=#\ %s

"" Haskell
autocmd FileType cabal set commentstring=--\ %s
autocmd FileType yesod_hs set commentstring=--\ %s
au BufRead,BufNewFile models set filetype=yesod_hs
au BufRead,BufNewFile routes set filetype=yesod_hs
au BufRead,BufNewFile *.hamlet set filetype=html
au BufRead,BufNewFile *.abi set filetype=json
au BufRead,BufNewFile *.toml set filetype=toml

autocmd FileType c set commentstring=//\ %s
autocmd FileType cpp set commentstring=//\ %s

" " Haskell Config
let g:ghcmod_ghc_options = ['-Wall', '-Werror']
nnoremap <F8> :w<cr>:GhcModCheck<cr>

" let g:hindent_style = 'chris-done'

" au BufEnter *.hs compiler ghc
" let g:ghc="stack ghc"
" let g:haddock_browser = "xdg-open"
" let g:haddock_browser_callformat = "%s %s"

" autocmd QuickFixCmdPost [^l]* nested cwindow
" autocmd QuickFixCmdPost    l* nested lwindow

" To disable remappiong of `ge` with vim-mmarkdown
map <Plug> <Plug>Markdown_EditUrlUnderCursor

""""""""""""""
""" Iv-specific
""""""""""""""

let mapleader=' '

" au WinLeave * set nocursorline
" au WinEnter * set cursorline


" set ttimeout
" set ttimeoutlen=50

let g:solarized_termtrans=1
set background=dark
" set background=light
" colorscheme solarized
colorscheme solarized_iv

" highlight ColorColumn ctermbg=magenta ctermfg=black
" call matchadd('ColorColumn', '\%80v', 100)

highlight lCursor guifg=NONE guibg=Cyan

" set the status line to display some useful information
set stl=%<\ [%3*%n%H%M%R%W%*]\ %<%F
set stl+=\ %5*%l%*/%L\ %5*%v%*

nnoremap <leader>i :!isort %<cr>

nnoremap <leader>e :windo e<cr>

nnoremap <leader>c :tabnew<cr>
nnoremap <leader>t mM:tabnew<cr>`M
nnoremap <leader>td :tabclose<cr>
nnoremap <leader>tD :tabclose!<cr>

nnoremap <F3> :Dispatch<cr>

" nnoremap gy gT
nnoremap <leader>; :
vnoremap <leader>; :

" require fzf and fzf.vim
nnoremap <leader>f :Files<cr>
nnoremap <leader>gc :Commits<cr>
nnoremap <leader>gbc :BCommits<cr>

nnoremap <leader>bb :CtrlPBuffer<cr>
nnoremap <leader>fj :edit %:h/<cr>
nnoremap <leader>bd :bdel<cr>
nnoremap <leader>bD :bdel!<cr>

nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bN :bnext!<cr>
nnoremap <leader>bp :bprev<cr>
nnoremap <leader>bP :bprev!<cr>

nnoremap <leader>w/ :vsplit<cr>
nnoremap <leader>w- :split<cr>
nnoremap <leader>wd :close<cr>
nnoremap <leader>sip vip:sort i<cr>

let g:haskell_indent_disable = 1

nnoremap gr ciw<C-r>0<esc>b

" cd ~/.vim/bundle && git clone https://github.com/rking/ag.vim
" let g:ag_prg="ag --vimgrep"
let g:ag_working_path_mode="r"
" cd ~/.vim/bundle && git clone https://github.com/ivanovs-4/vim-action-ag
" let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\|'
nnoremap <leader>/ :Ag

" rearrange arguments each to one line
" nnoremap <leader>4  %mm%lc`m<cr><cr><c-o>k<c-r>"<esc>kmmjjmnk:s/\v\,\zs\s/\r/g<cr>`nv`m=

" Make underline text for markdown header
" ----------------------------------
nnoremap <leader>- yypVr-:<C-u>nohlsearch<cr><C-l>o

" Detect *.md files as markdown filetype
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" sort
nnoremap <Leader>s :sort i<cr>
vnoremap <Leader>s :sort i<cr>

" Y should behave like D and C
noremap Y y$

" au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
au FileType javascript setlocal equalprg=python\ -m\ json.tool\ 2>/dev/null

nnoremap <Leader>8 <esc>:!autopep8 --in-place --aggressive --aggressive %<cr>

" edit ~/.vim/colors/iv-color.vim
nnoremap <Leader>C :n ~/.vim/colors/iv-color.vim<cr>

" edit reload .vimrc
nnoremap <Leader>V :n ~/.vim/vimrc<cr>

" reload .vimrc
nnoremap <Leader>v :update<cr>:so $MYVIMRC<cr>
" autocmd BufWritePost ~/.vimrc   so ~/.vimrc

" git diff
nnoremap <Leader>d :!clear; git diff -U2 HEAD<cr>

" hg diff
nnoremap <Leader>h :!clear; hg diff<cr>

" Strip trailing whitespace {{{2
function! Preserve(command)
" Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
" Do the business:
  execute a:command
" Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! GitAutocommitCurrentFile()
    :w!
    :lcd %:h
    :silent! !git reset
    :silent! !git add -f %
    :silent! !git commit -m '% autocommit'
    :lcd!
    :e!
    :redraw!
endfunction

nnoremap <leader>gc :call GitAutocommitCurrentFile()<cr>

" Python

" to python class begin
nnoremap [c ?^class <cr>

" strip trailing space in python files
" autocmd BufWritePre *.py normal m`:%s/\v\s+$//e<cr>``

function! TrimTrailingSpace()
    let save_cursor = getpos(".")
    :silent! %s#\v\s+$##e
    call setpos('.', save_cursor)
endfunction

nnoremap <F2> :wall<cr>
nnoremap <leader><F2> :call TrimTrailingSpace()<cr>:w<cr>

nnoremap <F3> :wall<cr>:VimuxRunCommand(":reload\rmain")<cr>
nnoremap <F4> :wall<cr>:VimuxRunCommand(':reload')<cr>
nnoremap <F5> :wall<cr>:VimuxRunCommand('!!')<cr>
nnoremap <leader>fs :call TrimTrailingSpace()<cr>:w<cr>
nnoremap <leader>fS :w<cr>

" fast :w
" nnoremap <Leader>W :w<cr>

" sudo save
nnoremap <Leader><C-w> :w !sudo tee % > /dev/null<cr>



""""""""""""""
""" Plugins settings
""""""""""""""

let g:syntastic_mode_map = { 'mode': 'passive' }

let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_haskell_checkers = ['hdevtools', 'hlint', 'liquid']
let g:vim_annotations_offset = '/.liquid/'
" let g:syntastic_haskell_liquid_args = "--diff"

" git-gutter
" To change the hunk-jumping maps:
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk

" To change the hunk-staging/reverting maps:
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterRevertHunk

" TO TURN ON LINE HIGHLIGHTING BY DEFAULT
" let g:gitgutter_highlight_lines = 1


""""""""""""""
""" Useful
""""""""""""""

" ex_mode/history-scrollers.vim
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" hide search matches
" Отучаюсь жать ctrl-l
" nnoremap <silent><C-l> :<C-u>nohlsearch<cr><C-l>

" The & command is a synonym for :s, which repeats the last substitution. Unfortunately,
" if any flags were used, the & command disregards them, meaning that the outcome
"     could be quite different from the previous substitution.
"     Making & trigger the :&& command is more useful. It preserves flags and therefore
"     produces more consistent results. These mappings fix the & command in Normal
"     mode and create a Visual mode equivalent:
nnoremap & :&&<CR>
xnoremap & :&&<CR>

xnoremap . :normal .<CR>

inoremap <C-U> <C-G>u<C-U>


" " autocmd QuickFixCmdPost * bot cwindow " open quickfix at bottom

nmap <leader>q <Plug>(qf_qf_toggle)
nmap <leader>l <Plug>(qf_loc_toggle)
" let g:qf_max_height = 21
let g:dispatch_quickfix_height = 13


""""""""""""""
""" TIPS
""""""""""""""

" go to defn of tag under the cursor
fun! MatchCaseTag()
    let ic = &ic
    set noic
    try
        exe 'tjump ' . expand('<cword>')
    finally
       let &ic = ic
    endtry
endfun
nnoremap <silent> <c-]> :call MatchCaseTag()<CR>

" TIP 'nelstrom/vim-visual-star-search'
" From http://got-ravings.blogspot.com/2008/07/vim-pr0n-visual-search-mappings.html
" makes * and # work on visual mode too.
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" TIP 'nelstrom/vim-qargs'
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
